{"version":3,"sources":["MemeSection/index.styles.js","MemeSection/index.js","Modifiers/index.styles.js","Modifiers/index.js","App.js","serviceWorker.js","index.js"],"names":["styles","theme","memeHolder","height","width","background","color","position","display","textHolder","alignItems","fontFamily","whiteSpace","insta","top","spacing","right","opacity","page","bottom","left","textTransform","bold","fontWeight","strike","textDecoration","italic","fontStyle","MemeSection","replaceHTML","searchText","searchAndReplace","text","count","replace","i","length","search","match","e","console","error","writeCaption","classes","RegExp","props","memeCaption","render","className","style","padding","fontSize","font","Component","withStyles","modifiers","btn","marginTop","Modifiers","TextField","label","rows","multiline","fullWidth","onChange","onTextChange","List","ListItem","ListItemIcon","SpaceBar","ListItemText","primary","Slider","value","step","valueLabelDisplay","min","max","marks","name","val","onSliderChange","ListItemSecondaryAction","IconButton","Divider","varient","component","FontDownload","App","state","log","target","setState","CssBaseline","this","React","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ff3c3d2.chunk.js","sourcesContent":["const styles = theme => {\r\n    return ({\r\n        memeHolder: {\r\n            height: '100vw',\r\n            width: '100vw',\r\n            background: '#000',\r\n            color:'#fff',\r\n            position: 'relative',\r\n            display: 'flex'\r\n        },\r\n        textHolder: {\r\n            display: 'flex',\r\n            width: '100%',\r\n            alignItems: 'center',\r\n            fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n            whiteSpace: 'pre-wrap'\r\n        },\r\n        insta: {\r\n            position: 'absolute',\r\n            top: theme.spacing(1),\r\n            right: theme.spacing(1),\r\n            opacity: 0.8\r\n        },\r\n        page: {\r\n            position: 'absolute',\r\n            bottom: theme.spacing(1),\r\n            left: theme.spacing(1),\r\n            textTransform: 'uppercase',\r\n            opacity: 0.8\r\n        },\r\n        bold: {\r\n            fontWeight: 'bold'\r\n        },\r\n        strike: {\r\n            textDecoration: 'line-through'\r\n        },\r\n        italic: {\r\n            fontStyle: 'italic'\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport default styles","import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport styles from './index.styles'\r\n\r\n\r\nclass MemeSection extends Component {\r\n\r\n    replaceHTML = (searchText, searchAndReplace) => {\r\n        //let el = [];\r\n        let text = ''\r\n        let count = 0\r\n        searchText.replace(/\\r\\n|\\r|\\n/g,\"<br />\")\r\n        for(let i = 0; i < searchAndReplace.length; i++){\r\n            //console.log(i, searchText.search(searchAndReplace[i][1]))\r\n            while(searchText.search(searchAndReplace[i][1]) !== -1 && count < 8) {\r\n                text = searchText.match(searchAndReplace[i][1])\r\n                //console.log(text)\r\n                try{\r\n                //if(text){\r\n                    //console.log(\"Entered\")\r\n                    searchText = searchText.replace(\r\n                        searchAndReplace[i][1],\r\n                        `<span class='${searchAndReplace[i][0]}'>${text[1]}</span>`)\r\n                    //console.log(searchText)\r\n                //}\r\n                }catch(e) {\r\n                    console.error(\"Error caused\", i, text, searchText, e)\r\n                }\r\n                count += 1\r\n            }\r\n        }\r\n        return searchText\r\n    }\r\n\r\n    writeCaption = (classes) => {\r\n        //let content = []\r\n        let searchAndReplace = [\r\n            [classes.bold, new RegExp('\\\\*\\\\*([a-zA-z0-9\\'\\\\s]*)\\\\*\\\\*')],\r\n            [classes.italic, new RegExp('__([a-zA-z0-9\\'\\\\s]*)__')],\r\n            [classes.strike, new RegExp('~~([a-zA-z0-9\\'\\\\s]*)~~')]\r\n        ]\r\n        //check for boldness\r\n        //content = [\r\n        const content = this.replaceHTML(this.props.memeCaption, searchAndReplace)\r\n        //]\r\n        return content\r\n\r\n    }\r\n\r\n    render = () => {\r\n        //console.log(this.props.memeCaption)\r\n        const {classes} =  this.props\r\n        return(\r\n            <div className={classes.memeHolder}>\r\n                {/* <pre className={classes.textHolder} dangerouslySetInnerHTML={{__html: this.writeCaption(classes)}} style={{padding: this.props.padding, fontSize: this.props.font}}>\r\n\r\n                </pre> */}\r\n               <pre className={classes.textHolder} style={{padding: this.props.padding, fontSize: this.props.font}}>\r\n                   {this.props.memeCaption}\r\n               </pre>\r\n               <span className={classes.insta}>@thecheaptalkers</span>\r\n               <span className={classes.page}>[tct]</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles)(MemeSection)","const styles = theme => ({\r\n    modifiers: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    btn: {\r\n        fontSize: 16,\r\n        position: 'absolute',\r\n        marginTop: -4\r\n    }\r\n})\r\n\r\n\r\nexport default styles","import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport styles from './index.styles'\r\nimport { TextField, Slider, ListItemSecondaryAction, Grid, List, ListItem, Divider, ListItemText, ListItemIcon, Select, MenuItem, IconButton } from '@material-ui/core';\r\nimport { FontDownload, SpaceBar } from '@material-ui/icons'\r\n\r\nconst Picker = props => (\r\n    <Grid container>\r\n        <Select name=\"color\">\r\n            <MenuItem value='#000' style={{backgroundColor: 'red'}}>Black</MenuItem>\r\n        </Select>\r\n    </Grid>\r\n)\r\n\r\nclass Modifiers extends Component {\r\n    render = () => {\r\n        \r\n        const {classes} =  this.props\r\n        //  console.log(this.props)\r\n        //let spaceMarks = []\r\n        //console.log(spaceMarks)\r\n        return(\r\n            <div className={classes.modifiers}>\r\n                <TextField \r\n                    label=\"Meme Text\"\r\n                    rows={3}\r\n                    multiline={true}\r\n                    fullWidth={true}\r\n                    onChange={this.props.onTextChange}\r\n                />\r\n                <List>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <SpaceBar/>\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={\r\n                                <Slider \r\n                                    value={this.props.padding}\r\n                                    step={8}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    min={0}\r\n                                    max={80}\r\n                                    marks={true}\r\n                                    name=\"padding\"\r\n                                    onChange={(e, val) => this.props.onSliderChange(val, 'padding')}\r\n                                />\r\n                            }\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton><span className={classes.btn}>{this.props.padding}</span></IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <Divider varient=\"inset\" component=\"li\"/>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <FontDownload/>\r\n                        </ListItemIcon>\r\n                        <ListItemText \r\n                            primary={\r\n                                <Slider \r\n                                    value={this.props.font}\r\n                                    step={4}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    min={8}\r\n                                    max={40}\r\n                                    marks={true}\r\n                                    name=\"font\"\r\n                                    onChange={(e, val) => this.props.onSliderChange(val, 'font')}\r\n                                    \r\n                                />\r\n                            }\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton><span className={classes.btn}>{this.props.font}</span></IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                    <Divider varient=\"inset\" component=\"li\"/>\r\n                </List>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles)(Modifiers)","import React from 'react';\nimport MemeSection from './MemeSection'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Modifiers from './Modifiers'\n\n\n\nclass App extends React.Component {\n  state = {\n    memeCaption: '',\n    padding: 16,\n    font: 16,\n    color: '#000'\n  }\n\n  onTextChange = (e) => {\n    console.log(e.target.value)\n    this.setState({\n      memeCaption: e.target.value\n    })\n  }\n\n  onSliderChange = (val, name) => {\n    //console.log(val, name)\n    this.setState({\n      [name]: val\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <CssBaseline />\n        <Modifiers onTextChange={this.onTextChange} \n          padding={this.state.padding} \n          font={this.state.font}\n          onSliderChange={this.onSliderChange}/>\n        <MemeSection memeCaption={this.state.memeCaption}\n          padding={this.state.padding} \n          font={this.state.font}\n          />\n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}